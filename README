Group #9 Assignment #5
	Jon Boone
	Joshua Datko
	Paul DeMicco
	Joseph Heenan
________________

OVERVIEW: Assignment #5
________________

This assignment is broken into 5 parts detailed below.

1.) Implements an interpreter for the proposition calculus using
    scheme following the syntax below:

    < boolexp > → #t | #f [boolean constants]
    < boolexp > → variable [boolean variables]
    < boolexp > → (and boolexp ... boolexp)
    < boolexp > → (or boolexp ... boolexp)
    < boolexp > → (not boolexp)
    < boolexp > → (implies boolexp boolexp)
                  [P => Q, where P is the first argument and Q is the
                  second argument]   
    < boolexp > → (equiv boolexp boolexp)
                  [P <=> Q, where P is the first argument and Q is the
                  second argument]  

  The interpreter takes a boolean expression and an environment and
  returns either #t or #f. If an undefined variable is encountered
  then the symbol error is returned.  The interpreter transform
  boolean operators (and and or) with more than two arguments to
  nested operators with just two arguments.


2.) Uses the boolean expression interpreter from question 1 to prove
    tautologies. I.E. a boolean expression that is true for all
    possible values of the variables. E.G. (or P (not P)), (equiv (or
    P Q) (or Q P)), (equiv (or P Q) (or P (and (not P) Q))).  The
    prover generates all possible values for the variables occuring in
    the boolean expression [all possible bindings], and uses the
    interpreter to verify that the expression is true for all possible
    variable bindings. 

3.) Trace scheme interpreter from SICP using as input the following
    two expressions [you will have to add =, *, - as primitive
    procedures for this to work]. 

          (define (fact n)
             (if (= n 0) 1 (* n (fact (- n 1)))))
          (fact 3)

    You should indicate exactly how the interpreter interprets this code.

4.) Modify the SICP interpreter to use dynamic instead of static
    scope. Provide an example where the same code provides two
    different answers depending on which scoping rule is used.

5.) Implement an interpreter for the mini language in scheme. Use the
    following representation for mini language programs.

    prog -> stmt-list
    stmt-list -> (stmt-seq)
    stmt-seq -> stmt | stmt stmt-seq
    stmt -> assign-stmt | if-stmt | while-stmt
    assign-stmt -> (assign identifier expr)
    if-stmt -> (if expr stmt-list stmt-list)
    while-stmt -> (while expr stmt-list)
    expr -> integer | identifier | (+ expr expr) | (- expr expr) | 
            (* expr expr) 


This package contains all of the files for Assignment #5.

=======

beval.scm

  Contains the implementation of an interpreter for the proposition
  calculus using scheme.

tautprover.scm

   Contains the implementation of the tautology prover.  Loads beval.scm.

scheme3.scm

The solution for part 3 requires the meta linguistic evaluator from chapter 4.
So, you must load "ch4-mceval.scm" and then load "scheme3.scm" and then enter
the function found at the top of "scheme3.scm".  The trace is detailed as
comments in scheme3.scm.

scheme4.scm

Contains the scheme code that modifies the SICP interpreter to use dynamic
instead of static scope.  run "make view-part-4" to view the patch which shows
the changes between the lexical scope base file (ch4-mceval.scm) and the
dynamic scope file.  dynamic_v_lexical.scm shows a set of functions that
produce different results depending on scoping rules.

NOTE: You will have to restart the scheme interpreter between runs as they both
try to define "eval" and it will not working correctly.

scheme5.scm

Contains the implementation of an interpreter for the mini language in scheme.

makefile

=====


TEST FILES - Will be explained in detail below :
________________
scheme1.scm

  Contains tests cases for the implementation of the (beval ...)
  interpreter. Loads beval.scm.

scheme2.scm

  Contains test cases for the implementation of the (tautology-prover
  ...). Loads tautprover.scm.
   
TODO - Document test files used.

README	** This file. Contains details out how to run files, build, test, etc.

RUNNING/TESTING: Assignment #5, Part #1
___________
make view-part-1
     to see the implementation of the propositional logic interpreter
--> to run: (load "beval.scm") and then type in a call to (beval ...)
  such as: (beval '(imply p q) '((p #t) (q #f))), where '(imply p q)
  is a boolean expr and '((p #t) (q #f)) is an environment with two
  bindings (one of p of #t; one for q of #f). 

  Automated tests from scheme1.scm can be run by typing "make
  test-part-1" at the shell prompt. 


RUNNING/TESTING: Assignment #5, Part #2
___________
make view-part-2
      to see the implementation of the tautology prover
--> to run: (load "tautprover.scm") and then type in a call to
  (tautology-prover ...) such as: (tautology-prover '(or p (not p))),
  where '(or p (not p)) is the boolean expression that should be true
  for all bindings of the variables contained therein.

  Automated tests from scheme2.scm can be run by typing "make
  test-part-2" at the shell prompt.

RUNNING/TESTING: Assignment #5, Part #3
___________
make view-part-3
     to see the trace description
--> to run: load "ch4-mceval.scm" then load "scheme3.scm" and type in the
function (since the new REPL is running)

RUNNING/TESTING: Assignment #5, Part #4
___________
make view-part-4
     to see the differences to implement dynamic scope and the test code.
--> to run: load "scheme.4" and then load "dynamic_v_lexical.scm" and uncomment
and run the first two lines to start the driver loop.  Then enter the code in
dynmaic_v_lexical to see the difference.  Shut down the interpreter and perform
the same steps except load "ch4-mceval.scm" to see it with lexical scoping.

RUNNING: Assignment #5, Part #5
___________
Easiest way is to run "make test-part-5".

TESTING: Assignment #5, Part #5
___________
Various mini language programs were ported into scheme-mini-language in the
mini_lang_tests folder.  Each of these were run and the final environment was
analyzed to ensure correct operation.
